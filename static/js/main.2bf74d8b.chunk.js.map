{"version":3,"sources":["images.js","components/Card.js","components/Gamepage.js","App.js","index.js"],"names":["images","Card","props","className","onClick","src","value","alt","Gamepage","imgs","useState","map","image","isSelected","cards","setCards","bestScore","setBestScore","score","setScore","MAX_SCORE","length","console","log","useEffect","currentScore","alertWinner","updateCards","prevState","item","display","card","i","selectedCard","filter","element","checkCard","array","j","Math","floor","random","shuffle","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8MASeA,EATA,CACX,uBACA,sBACA,uBACA,qBACA,qBACA,sBCQWC,EAZF,SAACC,GACV,OACI,qBAAKC,UAAU,OAAf,SACI,qBACIA,UAAU,cACVC,QAAS,kBAAKF,EAAME,WACpBC,IAAKH,EAAMI,MAAMD,IACjBE,IAAI,QC6DLC,EAlEE,WACb,IAAMC,EAAOT,EADM,EAEOU,mBAASD,EAAKE,KAAI,SAAAC,GACxC,MAAQ,CACJC,YAAY,EACZ,IAAOD,OALI,mBAEZE,EAFY,KAELC,EAFK,OAQeL,mBAAS,GARxB,mBAQZM,EARY,KAQDC,EARC,OASOP,mBAAS,GAThB,mBASZQ,EATY,KASLC,EATK,KAUbC,EAAYN,EAAMO,OACxBC,QAAQC,IAAIH,GAEZI,qBAAU,WACN,IAAyBC,EACpBT,GADoBS,EAUTP,IATmBD,EAAaQ,GAIhD,SAAqBA,GACdA,GAAgBL,GACfD,EAAS,GALbO,CAAYD,KASjB,CAACT,EAAWE,EAAOE,IAEtB,IAsBOO,EAAc,WACjBZ,GAAS,SAAAa,GAAS,OAAIA,EAAUjB,KAAI,SAAAkB,GAAkC,OAAzBA,EAAKhB,YAAa,EAAcgB,SAG3EC,EAAUhB,EAAMH,KAAI,SAACoB,EAAMC,GAAP,OAAa,cAAC,EAAD,CAAwB1B,MAAOyB,EAAM3B,QAAS,YA1BnE,SAAC2B,GACf,IAAME,EAAenB,EAAMoB,QAAO,SAAAC,GAAO,OAAIA,IAAYJ,KAAM,GAC5DE,EAAapB,YACZM,EAAS,GACTQ,KAIAR,GAAS,SAAAS,GAAS,OAAGA,EAAY,KAErCK,EAAapB,YAAa,EAgB8DuB,CAAUL,GAAOhB,GAAS,SAAAa,GAAS,OAb/G,SAACS,GACb,IAAI,IAAIL,EAAIK,EAAMhB,OAAO,EAAGW,EAAI,EAAGA,IAAK,CACpC,IAAMM,EAAIC,KAAKC,MAAMD,KAAKE,UAAYT,EAAE,IADJ,EAEb,CAACK,EAAMC,GAAID,EAAML,IAAvCK,EAAML,GAF6B,KAEzBK,EAAMC,GAFmB,KAIxC,OAAOD,EAQwHK,CAAQ,YAAId,SAAxG,eAAmBI,OAC1D,OACI,sBAAK7B,UAAU,YAAf,UACI,gCACI,8CAAiBa,KACjB,yCAAYE,QAEhB,qBAAKf,UAAU,aAAf,SACK2B,QCtDFa,MARf,WACE,OACE,qBAAKxC,UAAU,MAAf,SACE,cAAC,EAAD,OCDNyC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.2bf74d8b.chunk.js","sourcesContent":["const images = [\n    \"./sw_pics/ackbar.jpg\",\n    \"./sw_pics/boba.jpeg\",\n    \"./sw_pics/chewie.jpg\",\n    \"./sw_pics/kylo.jpg\",\n    \"./sw_pics/leia.jpg\",\n    \"./sw_pics/maul.jpg\"\n]\n\nexport default images","import React from 'react'\n\nconst Card = (props) => {\n    return (\n        <div className=\"card\">\n            <img \n                className=\"card--image\"\n                onClick={()=> props.onClick()}\n                src={props.value.src} \n                alt=\"\" \n            />\n        </div>\n    )\n}\nexport default Card","import React, {useState, useEffect} from 'react'\nimport images from  '../images'\nimport Card from './Card'\n\nconst Gamepage = () => {\n    const imgs = images\n    const [cards, setCards] = useState(imgs.map(image => {\n        return  {\n            isSelected: false,\n            \"src\": image\n        }\n    }))\n    const [bestScore, setBestScore] = useState(0)\n    const [score, setScore] = useState(0)\n    const MAX_SCORE = cards.length\n    console.log(MAX_SCORE)\n\n    useEffect(() => {\n        function updateBestScore(currentScore) {\n            (bestScore < currentScore) &&  setBestScore(currentScore)\n            alertWinner(currentScore)\n        }\n        \n        function alertWinner(currentScore) {\n            if(currentScore >= MAX_SCORE) {\n                setScore(0)\n            }\n        }\n        updateBestScore(score)\n    }, [bestScore, score, MAX_SCORE])\n\n    const checkCard = (card) => {\n        const selectedCard = cards.filter(element => element === card)[0]\n        if(selectedCard.isSelected) {\n            setScore(0)\n            updateCards()\n\n        }\n        else {\n            setScore(prevState=> prevState + 1)\n        }\n        selectedCard.isSelected = true\n    }\n    \n    const shuffle = (array) => {\n        for(let i = array.length-1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i+1));\n            [array[i], array[j]] = [array[j], array[i]]\n        }\n        return array\n\n    }\n\n    const  updateCards = () => {\n        setCards(prevState => prevState.map(item => {item.isSelected = false; return item }))\n    }\n    // [...Array] is equivalent to Array.Slice\n    const display = cards.map((card, i) => <Card key={`card-${i}`} value={card} onClick={() => {checkCard(card); setCards(prevState => shuffle([...prevState]))}} />)\n    return (\n        <div className=\"container\">\n            <div>\n                <h2>Best Score: {bestScore}</h2>\n                <h2>Score: {score}</h2>\n            </div>\n            <div className=\"card-group\">\n                {display}\n            </div>\n        </div>\n    )\n}\nexport default Gamepage","import React from 'react'\nimport Gamepage from './components/Gamepage';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Gamepage/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}